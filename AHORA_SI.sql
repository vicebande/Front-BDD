-- ***************************************************************
-- PL/SQL Truck Rental: SOLUCIÓN FINAL Y DEFINITIVA
-- Corregido ORA-00942 (Tablas HIST_MULTAS_CLIENTE y HIST_ARRIENDO_ANUAL_CAMION faltantes)
-- ***************************************************************

SET SERVEROUTPUT ON;

-- ***************************************************************
-- 1. CREACIÓN CRÍTICA DE TABLAS HISTÓRICAS (Solución ORA-00942)
-- ***************************************************************

-- Crear HIST_MULTAS_CLIENTE si no existe (Faltaba en su DDL base)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE hist_multas_cliente CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- **TABLA FALTANTE**
CREATE TABLE hist_multas_cliente (
    anno_proceso NUMBER(4) NOT NULL,
    tipo_cliente VARCHAR2(20) NOT NULL,
    total_multas NUMBER(10),
    total_dias_atraso NUMBER(10) -- Añadida para el reporte
);
/

-- Crear HIST_ARRIENDO_ANUAL_CAMION si no existe (Asegurando las PK y columnas)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE hist_arriendo_anual_camion CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- **TABLA REQUERIDA** (Asumiendo la PK compuesta por año y patente)
CREATE TABLE hist_arriendo_anual_camion (
    anno_proceso NUMBER(4) NOT NULL,
    nro_patente VARCHAR2(6) NOT NULL,
    valor_arriendo_dia NUMBER(8),
    valor_garactia_dia NUMBER(8),
    total_veces_arrendado NUMBER(7),
    total_multas NUMBER(10),
    CONSTRAINT PK_HIST_ARRIENDO_ANUAL PRIMARY KEY (anno_proceso, nro_patente)
);
/


-- 1.1 Creación de tabla de log
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE log_arriendo CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE log_arriendo (
    id_log NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_arriendo_fk NUMBER NOT NULL,
    fecha_registro DATE DEFAULT SYSDATE,
    usuario_registro VARCHAR2(50) DEFAULT USER
);
/

-- 1.2 Redefinición de MULTA_ARRIENDO
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE MULTA_ARRIENDO CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN NULL; END IF;
END;
/

CREATE TABLE MULTA_ARRIENDO
(
 id_arriendo NUMBER(7) NOT NULL CONSTRAINT PK_MULTA_ARRIENDO PRIMARY KEY,
 anno_mes_proceso NUMBER(6) NOT NULL,
 nro_patente VARCHAR2(6) NOT NULL,
 numrun_cli NUMBER(10) NOT NULL,
 dias_atraso NUMBER(3) NOT NULL,
 monto_multa NUMBER(8) NOT NULL,
 total_pagar NUMBER(10) NOT NULL,
 CONSTRAINT FK_MULTA_ARRIENDO_ARRIENDO FOREIGN KEY (id_arriendo) REFERENCES ARRIENDO_CAMION(id_arriendo)
);
/


-- ***************************************************************
-- 2. FUNCIONES, TRIGGERS Y PACKAGE
-- ***************************************************************

-- FN_CALC_MULTA_ATRASO
CREATE OR REPLACE FUNCTION FN_CALC_MULTA_ATRASO ( p_dias_atraso NUMBER ) RETURN NUMBER IS
    TYPE t_multas IS VARRAY(5) OF NUMBER;
    v_tabla_multas t_multas := t_multas(5000, 10000, 20000, 40000, 80000);
    v_multa NUMBER := 0;
BEGIN
    IF p_dias_atraso <= 0 THEN v_multa := 0;
    ELSIF p_dias_atraso <= 2 THEN v_multa := v_tabla_multas(1) * p_dias_atraso; 
    ELSIF p_dias_atraso <= 5 THEN v_multa := v_tabla_multas(2) * p_dias_atraso; 
    ELSIF p_dias_atraso <= 10 THEN v_multa := v_tabla_multas(3) * p_dias_atraso; 
    ELSE v_multa := v_tabla_multas(5) * p_dias_atraso;
    END IF;
    RETURN v_multa;
EXCEPTION WHEN OTHERS THEN RETURN 0; 
END FN_CALC_MULTA_ATRASO;
/

-- FN_OBT_VALOR_GARANTIA_BASE
CREATE OR REPLACE FUNCTION FN_OBT_VALOR_GARANTIA_BASE RETURN NUMBER IS
    v_garantia_base CONSTANT NUMBER := 10000;
BEGIN RETURN v_garantia_base; END FN_OBT_VALOR_GARANTIA_BASE;
/

-- TRG_LOG_NUEVO_ARRIENDO
CREATE OR REPLACE TRIGGER TRG_LOG_NUEVO_ARRIENDO AFTER INSERT ON arriendo_camion FOR EACH ROW
BEGIN INSERT INTO log_arriendo(id_arriendo_fk, usuario_registro) VALUES (:NEW.id_arriendo, USER); END;
/

-- TRG_PROHIBE_DML_HISTORICO (Ahora sí compila, ya que HIST_MULTAS_CLIENTE existe)
CREATE OR REPLACE TRIGGER TRG_PROHIBE_DML_HISTORICO BEFORE DELETE ON hist_multas_cliente
BEGIN RAISE_APPLICATION_ERROR(-20001, '⛔ ERROR: No se permite la eliminación (DELETE) de registros históricos en la tabla hist_multas_cliente.'); END;
/

-- PKG_TRUCK_RENTAL SPEC
CREATE OR REPLACE PACKAGE PKG_TRUCK_RENTAL IS
    PROCEDURE PR_PROCESO_MASIVO_TRUCK_RENTAL; 
    PROCEDURE PR_PROCESAR_ARRIENDO(p_id_arriendo IN arriendo_camion.id_arriendo%TYPE);
END PKG_TRUCK_RENTAL;
/

-- PKG_TRUCK_RENTAL BODY 
CREATE OR REPLACE PACKAGE BODY PKG_TRUCK_RENTAL IS
    FUNCTION FN_OBT_DATOS_CAMION_PRIVADA ( p_patente IN camion.nro_patente%TYPE, p_valor_dia OUT camion.valor_arriendo_dia%TYPE, p_garantia OUT camion.valor_garantia_dia%TYPE ) RETURN BOOLEAN IS
    BEGIN
        SELECT valor_arriendo_dia, NVL(valor_garantia_dia, 0) INTO p_valor_dia, p_garantia FROM camion WHERE nro_patente = p_patente;
        RETURN TRUE;
    EXCEPTION WHEN NO_DATA_FOUND THEN p_valor_dia := 0; p_garantia := 0; RETURN FALSE;
    END FN_OBT_DATOS_CAMION_PRIVADA;

    PROCEDURE PR_PROCESAR_ARRIENDO( p_id_arriendo IN arriendo_camion.id_arriendo%TYPE ) IS
        r_arr arriendo_camion%ROWTYPE; v_dias_atraso NUMBER; v_multa NUMBER; v_total_pagar NUMBER; v_valor_dia camion.valor_arriendo_dia%TYPE; v_garantia  camion.valor_garantia_dia%TYPE;
    BEGIN
        SELECT * INTO r_arr FROM arriendo_camion WHERE id_arriendo = p_id_arriendo AND fecha_devolucion IS NOT NULL;
        IF FN_OBT_DATOS_CAMION_PRIVADA(r_arr.nro_patente, v_valor_dia, v_garantia) THEN
            v_dias_atraso := TRUNC(r_arr.fecha_devolucion) - TRUNC(r_arr.fecha_ini_arriendo + NVL(r_arr.dias_solicitados,0));
            IF v_dias_atraso < 0 THEN v_dias_atraso := 0; END IF;
            v_multa := FN_CALC_MULTA_ATRASO(v_dias_atraso);
            v_total_pagar := (v_valor_dia * r_arr.dias_solicitados) + (v_garantia * r_arr.dias_solicitados) + v_multa;
            INSERT INTO multa_arriendo ( id_arriendo, anno_mes_proceso, nro_patente, numrun_cli, dias_atraso, monto_multa, total_pagar )
            VALUES ( r_arr.id_arriendo, TO_NUMBER(TO_CHAR(r_arr.fecha_devolucion, 'YYYYMM')), r_arr.nro_patente, r_arr.numrun_cli, v_dias_atraso, v_multa, v_total_pagar );
        END IF;
    EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error procesando arriendo ' || p_id_arriendo || ': ' || SQLERRM); RAISE;
    END PR_PROCESAR_ARRIENDO;

    PROCEDURE PR_PROCESO_MASIVO_TRUCK_RENTAL IS
        CURSOR c_arriendos IS SELECT a.id_arriendo FROM arriendo_camion a WHERE a.fecha_devolucion IS NOT NULL;
    BEGIN
        EXECUTE IMMEDIATE 'TRUNCATE TABLE multa_arriendo'; 
        EXECUTE IMMEDIATE 'TRUNCATE TABLE hist_arriendo_anual_camion'; 
        EXECUTE IMMEDIATE 'TRUNCATE TABLE hist_multas_cliente';
        
        -- 1. Procesamiento de arriendos y llenado de MULTA_ARRIENDO
        FOR r_arr IN c_arriendos LOOP PKG_TRUCK_RENTAL.PR_PROCESAR_ARRIENDO(r_arr.id_arriendo); END LOOP;
        
        -- 2. Llenado de HIST_ARRIENDO_ANUAL_CAMION (Agregado por Año y Patente)
        INSERT INTO hist_arriendo_anual_camion 
            ( anno_proceso, nro_patente, valor_arriendo_dia, valor_garactia_dia, total_veces_arrendado, total_multas )
        SELECT 
            TRUNC(ma.anno_mes_proceso / 100) AS anno_proceso, 
            ma.nro_patente, 
            MAX(c.valor_arriendo_dia) AS valor_arriendo_dia, 
            MAX(NVL(c.valor_garantia_dia, 0)) AS valor_garactia_dia, 
            COUNT(ma.id_arriendo) AS total_veces_arrendado, 
            SUM(ma.monto_multa) AS total_multas
        FROM multa_arriendo ma 
        JOIN camion c ON ma.nro_patente = c.nro_patente
        GROUP BY TRUNC(ma.anno_mes_proceso / 100), ma.nro_patente;
        
        -- 3. Llenado de HIST_MULTAS_CLIENTE (Agregado por Año y Tipo de Cliente)
        INSERT INTO hist_multas_cliente ( anno_proceso, tipo_cliente, total_multas, total_dias_atraso )
        SELECT 
            TRUNC(ma.anno_mes_proceso / 100) AS anno_proceso, 
            tc.nombre_tipo_cli, 
            SUM(ma.monto_multa) AS total_multas,
            SUM(ma.dias_atraso) AS total_dias_atraso
        FROM multa_arriendo ma 
        JOIN arriendo_camion a ON ma.id_arriendo = a.id_arriendo 
        JOIN cliente c ON a.numrun_cli = c.numrun_cli 
        JOIN tipo_cliente tc ON c.id_tipo_cli = tc.id_tipo_cli
        GROUP BY TRUNC(ma.anno_mes_proceso / 100), tc.nombre_tipo_cli;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('✅ Proceso masivo de Truck Rental completado exitosamente.');
    EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.PUT_LINE('❌ Ocurrió un error en el proceso masivo: ' || SQLERRM); RAISE;
    END PR_PROCESO_MASIVO_TRUCK_RENTAL;

END PKG_TRUCK_RENTAL;
/

-- ***************************************************************
-- 3. BLOQUE DE EJECUCIÓN CON REPOBLACIÓN DE DATOS MAESTROS (Corregido y Listo)
-- ***************************************************************

DECLARE
    v_anno VARCHAR2(4);
    
    PROCEDURE safe_insert(p_sql IN VARCHAR2) IS
    BEGIN
        EXECUTE IMMEDIATE p_sql;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN NULL;
        WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Advertencia al insertar datos maestros: ' || SQLERRM); RAISE; 
    END;
BEGIN
    v_anno := TO_CHAR(EXTRACT(YEAR FROM SYSDATE));
    
    -- 1. TRUNCAR TABLA DE ARRIENDOS Y REINICIAR SECUENCIA
    EXECUTE IMMEDIATE 'TRUNCATE TABLE arriendo_camion REUSE STORAGE';
    BEGIN 
        EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_ARRIENDO';
    EXCEPTION WHEN OTHERS THEN NULL; END;
    EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_ARRIENDO START WITH 1 INCREMENT BY 1';
    
    -- 2. INSERCIÓN DE DATOS MAESTROS MÍNIMOS (SOLUCIÓN A ORA-02291 y ORA-01400)
    
    -- Inserción de Camiones (Incluye todas las columnas NOT NULL)
    safe_insert('INSERT INTO CAMION (nro_patente, color, motor, anio, valor_arriendo_dia, valor_garantia_dia, id_tipo_camion, id_marca) VALUES (''AA1001'', ''Rojo'', ''2.0'', 2020, 50000, 10000, ''A'', 10)');
    safe_insert('INSERT INTO CAMION (nro_patente, color, motor, anio, valor_arriendo_dia, valor_garantia_dia, id_tipo_camion, id_marca) VALUES (''BT1002'', ''Azul'', ''2.5'', 2021, 60000, 10000, ''A'', 10)');
    safe_insert('INSERT INTO CAMION (nro_patente, color, motor, anio, valor_arriendo_dia, valor_garantia_dia, id_tipo_camion, id_marca) VALUES (''BC1002'', ''Gris'', ''2.0'', 2022, 70000, 10000, ''A'', 10)');

    -- Inserción de Clientes (Incluye todas las columnas NOT NULL)
    safe_insert('INSERT INTO CLIENTE (numrun_cli, dvrun_cli, appaterno_cli, apmaterno_cli, pnombre_cli, direccion, renta, id_tipo_cli, id_estado_civil) VALUES (11657132, ''8'', ''ACUÑA'', ''BARRERA'', ''RONNY'', ''OBS. ASTRONOMICO'', 420000, ''A'', 40)');
    safe_insert('INSERT INTO CLIENTE (numrun_cli, dvrun_cli, appaterno_cli, apmaterno_cli, pnombre_cli, direccion, renta, id_tipo_cli, id_estado_civil) VALUES (10639521, ''0'', ''UVAL'', ''RIQUELME'', ''MIGUEL'', ''SAN PABLO 7545'', 300000, ''A'', 40)');
    safe_insert('INSERT INTO CLIENTE (numrun_cli, dvrun_cli, appaterno_cli, apmaterno_cli, pnombre_cli, direccion, renta, id_tipo_cli, id_estado_civil) VALUES (12456789, ''1'', ''TEST'', ''CLIENTE'', ''GENERICO'', ''AV. PRUEBA 123'', 500000, ''B'', 30)');
    
    COMMIT;

    -- 3. INSERCIÓN DE DATOS DE ARRIENDO CON FECHAS SEGURAS (generando multas)
    INSERT INTO arriendo_camion VALUES (SEQ_ARRIENDO.NEXTVAL,'AA1001','11657132',TO_DATE('13/02/'||v_anno, 'DD/MM/YYYY'),8,TO_DATE('23/02/'||v_anno, 'DD/MM/YYYY'));
    INSERT INTO arriendo_camion VALUES (SEQ_ARRIENDO.NEXTVAL,'BT1002','10639521',TO_DATE('12/02/'||v_anno, 'DD/MM/YYYY'),7,TO_DATE('20/02/'||v_anno, 'DD/MM/YYYY'));
    INSERT INTO arriendo_camion VALUES (SEQ_ARRIENDO.NEXTVAL,'AA1001','11657132',TO_DATE('26/02/'||v_anno, 'DD/MM/YYYY'),3,TO_DATE('02/03/'||v_anno, 'DD/MM/YYYY'));
    INSERT INTO arriendo_camion VALUES (SEQ_ARRIENDO.NEXTVAL,'AA1001','12456789',TO_DATE('01/02/'||v_anno, 'DD/MM/YYYY'),4,TO_DATE('05/02/'||v_anno, 'DD/MM/YYYY'));
    INSERT INTO arriendo_camion VALUES (SEQ_ARRIENDO.NEXTVAL,'BC1002','10639521',TO_DATE('25/02/'||v_anno, 'DD/MM/YYYY'),5,TO_DATE('01/03/'||v_anno, 'DD/MM/YYYY'));

    -- 4. Llamada al proceso principal
    PKG_TRUCK_RENTAL.PR_PROCESO_MASIVO_TRUCK_RENTAL;
    
    DBMS_OUTPUT.PUT_LINE('🎉 Proceso de prueba y generación de reportes completado exitosamente.');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('❌ ERROR FATAL en el bloque de reinserción: ' || SQLERRM);
        RAISE;
END;
/